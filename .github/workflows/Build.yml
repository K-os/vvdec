name: CI build

on:
  push:
  release:
    types:
      - created

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-16.04
          - os: ubuntu-18.04
          - os: ubuntu-20.04
          - os: macos-10.15
          - os: windows-2019

    steps:
    - uses: actions/checkout@v2

    #- run: git fetch --prune --unshallow

    - name: Build Linux / mac
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --target all -j$(nproc)
        cmake --build . --target install
      if: matrix.os != 'windows-2019'

    - name: Build Windows
      run: |
        mkdir build
        cd build
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --target all -j$(nproc)
        cmake --build . --target install
      shell: cmd
      if: matrix.os == 'windows-2019'

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: vvdec-${{ matrix.os }}
        path: install


  create_release:
    if: contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      base_name: vvdec-${{ steps.tag_name.outputs.result }}

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: get-tag-name
      id: tag_name
      uses: actions/github-script@v3
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: return context.payload.ref.replace('refs/tags/', '');


  upload_release_assets:
    if: contains(github.ref, 'refs/tags/')
    needs: [build, create_release]

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-16.04
          - os: ubuntu-18.04
          - os: ubuntu-20.04
          - os: macos-10.15
          - os: windows-2019

    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: vvdec-${{ matrix.os }}
        path: -${{ matrix.os }}

    - name: Create Tarball
      run: tar -cvzf ${{ needs.create_release.outputs.base_name }}-${{ matrix.os }}.tar.gz ${{ needs.create_release.outputs.base_name }}-${{ matrix.os }}
      if: matrix.os != 'windows-2019'

    - name: Create ZIP-Archive
      run: zip -r ${{ needs.create_release.outputs.base_name }}-${{ matrix.os }}.zip ${{ needs.create_release.outputs.base_name }}-${{ matrix.os }}
      shell: cmd
      if: matrix.os == 'windows-2019'


    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ${{ needs.create_release.outputs.base_name }}-${{ matrix.os }}.*
        asset_name: ${{ needs.create_release.outputs.base_name }}-${{ matrix.os }}
        asset_content_type: application/zip
